import { IContainer, IIndexable, IServiceLocator } from '@aurelia/kernel';
import { HooksDefinition, PartialCustomElementDefinitionParts } from '../definitions';
import { INode, INodeSequence, IRenderLocation } from '../dom';
import { LifecycleFlags, State } from '../flags';
import { IBinding, IController, ILifecycle, IRenderContext, IViewModel, ViewModelKind, MountStrategy, IViewFactory } from '../lifecycle';
import { ILifecycleTask, MaybePromiseOrTask } from '../lifecycle-task';
import { IBindingTargetAccessor, IScope } from '../observation';
import { ITemplate } from '../rendering-engine';
import { IElementProjector } from '../resources/custom-element';
interface IElementTemplateProvider {
    getElementTemplate(renderingEngine: unknown, customElementType: unknown, parentContext: IServiceLocator): ITemplate;
}
declare type BindingContext<T extends INode, C extends IViewModel<T>> = IIndexable<C & {
    render(flags: LifecycleFlags, host: T, parts: PartialCustomElementDefinitionParts, parentContext: IServiceLocator): IElementTemplateProvider | void;
    created(flags: LifecycleFlags): void;
    binding(flags: LifecycleFlags): MaybePromiseOrTask;
    bound(flags: LifecycleFlags): void;
    unbinding(flags: LifecycleFlags): MaybePromiseOrTask;
    unbound(flags: LifecycleFlags): void;
    attaching(flags: LifecycleFlags): void;
    attached(flags: LifecycleFlags): void;
    detaching(flags: LifecycleFlags): void;
    detached(flags: LifecycleFlags): void;
    caching(flags: LifecycleFlags): void;
}>;
export declare class Controller<T extends INode = INode, C extends IViewModel<T> = IViewModel<T>> implements IController<T, C> {
    readonly vmKind: ViewModelKind;
    readonly flags: LifecycleFlags;
    readonly viewFactory: IViewFactory<T> | undefined;
    readonly lifecycle: ILifecycle;
    readonly viewModel: C | undefined;
    readonly parentContext: IContainer | IRenderContext<T> | undefined;
    readonly host: T | undefined;
    private static readonly lookup;
    readonly id: number;
    nextBound?: Controller<T, C>;
    nextUnbound?: Controller<T, C>;
    prevBound?: Controller<T, C>;
    prevUnbound?: Controller<T, C>;
    nextAttached?: Controller<T, C>;
    nextDetached?: Controller<T, C>;
    prevAttached?: Controller<T, C>;
    prevDetached?: Controller<T, C>;
    nextMount?: Controller<T, C>;
    nextUnmount?: Controller<T, C>;
    prevMount?: Controller<T, C>;
    prevUnmount?: Controller<T, C>;
    parent?: IController<T>;
    bindings?: IBinding[];
    controllers?: Controller<T, C>[];
    state: State;
    readonly hooks: HooksDefinition;
    readonly bindingContext?: BindingContext<T, C>;
    scopeParts?: string[];
    isStrictBinding?: boolean;
    scope?: IScope;
    part?: string;
    projector?: IElementProjector;
    nodes?: INodeSequence<T>;
    context?: IContainer | IRenderContext<T>;
    location?: IRenderLocation<T>;
    mountStrategy: MountStrategy;
    constructor(vmKind: ViewModelKind, flags: LifecycleFlags, viewFactory: IViewFactory<T> | undefined, lifecycle: ILifecycle, viewModel: C | undefined, parentContext: IContainer | IRenderContext<T> | undefined, host: T | undefined, options: {
        parts?: PartialCustomElementDefinitionParts;
    });
    static forCustomElement<T extends INode = INode>(viewModel: object, parentContext: IContainer | IRenderContext<T>, host: T, flags?: LifecycleFlags, options?: {
        parts?: PartialCustomElementDefinitionParts;
    }): Controller<T>;
    static forCustomAttribute<T extends INode = INode>(viewModel: object, parentContext: IContainer | IRenderContext<T>, flags?: LifecycleFlags): Controller<T>;
    static forSyntheticView<T extends INode = INode>(viewFactory: IViewFactory<T>, lifecycle: ILifecycle, flags?: LifecycleFlags): Controller<T>;
    is(name: string): boolean;
    lockScope(scope: IScope): void;
    hold(location: IRenderLocation<T>, mountStrategy: MountStrategy): void;
    release(flags: LifecycleFlags): boolean;
    bind(flags: LifecycleFlags, scope?: IScope, part?: string): ILifecycleTask;
    unbind(flags: LifecycleFlags): ILifecycleTask;
    bound(flags: LifecycleFlags): void;
    unbound(flags: LifecycleFlags): void;
    attach(flags: LifecycleFlags): void;
    detach(flags: LifecycleFlags): void;
    attached(flags: LifecycleFlags): void;
    detached(flags: LifecycleFlags): void;
    mount(flags: LifecycleFlags): void;
    unmount(flags: LifecycleFlags): void;
    cache(flags: LifecycleFlags): void;
    getTargetAccessor(propertyName: string): IBindingTargetAccessor | undefined;
    private bindCustomElement;
    private bindCustomAttribute;
    private bindSynthetic;
    private bindBindings;
    private bindControllers;
    private endBind;
    private unbindCustomElement;
    private unbindCustomAttribute;
    private unbindSynthetic;
    private unbindBindings;
    private unbindControllers;
    private endUnbind;
    private attachCustomElement;
    private attachCustomAttribute;
    private attachSynthetic;
    private detachCustomElement;
    private detachCustomAttribute;
    private detachSynthetic;
    private attachControllers;
    private detachControllers;
    private mountCustomElement;
    private mountSynthetic;
    private unmountCustomElement;
    private unmountSynthetic;
    private cacheCustomElement;
    private cacheCustomAttribute;
    private cacheSynthetic;
}
export {};
//# sourceMappingURL=controller.d.ts.map