(function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@aurelia/kernel"),require("@aurelia/runtime")):"function"==typeof define&&define.amd?define(["exports","@aurelia/kernel","@aurelia/runtime"],e):e((t=t||self).fetchClient={},t.kernel,t.runtime)})(this,function(t,kernel,runtime){"use strict";function e(t){if(!t.ok)throw t;return t}function r(t){return t}function n(t){throw t}const retryStrategy={fixed:0,incremental:1,t:2,random:3},s={s:3,interval:1e3,strategy:retryStrategy.fixed};class RetryInterceptor{constructor(t){if(this.i=Object.assign({},s,void 0!==t?t:{}),this.i.strategy===retryStrategy.t&&1e3>=this.i.interval)throw Error("An interval less than or equal to 1 second is not allowed when using the exponential retry strategy")}o(t){return t.i||(t.i=Object.assign({},this.i),t.i.u=0),t.i.h=t.clone(),t}response(t,e){return Reflect.deleteProperty(e,"retryConfig"),t}l(t,e,r){const{i:n}=e,{h:s}=n;return Promise.resolve().then(()=>{if(n.s>n.u){const o=void 0!==n.p?n.p(t,e):1;return Promise.resolve(o).then(o=>{if(o){n.u++;const t=(function(t){const{interval:e,strategy,v:r,m:n,u:s}=t;if("function"==typeof strategy)return t.strategy(s);switch(strategy){case retryStrategy.fixed:return i[retryStrategy.fixed](e);case retryStrategy.incremental:return i[retryStrategy.incremental](s,e);case retryStrategy.t:return i[retryStrategy.t](s,e);case retryStrategy.random:return i[retryStrategy.random](s,e,r,n);default:throw Error("Unrecognized retry strategy")}})(n);return new Promise(e=>kernel.PLATFORM.global.setTimeout(e,isNaN(t)?0:t)).then(()=>{const t=s.clone();return"function"==typeof n.R?n.R(t,r):t}).then(t=>{const e=Object.assign({},t,{i:n});return r.fetch(e)})}throw Reflect.deleteProperty(e,"retryConfig"),t})}throw Reflect.deleteProperty(e,"retryConfig"),t})}}const i=[t=>t,(t,e)=>e*t,(t,e)=>1===t?e:Math.pow(e,t)/1e3,(t,e,r=0,n=6e4)=>Math.random()*(n-r)+r];class HttpClientConfiguration{constructor(){this.g="",this.q={},this.C=[]}j(t){return this.g=t,this}O(t){return this.q=t,this}T(t){return this.C.push(t),this}P(){return Object.assign(this.q,{H:"same-origin"},this.q),this.I()}I(){return this.T({response:e})}S(t){const e=new RetryInterceptor(t);return this.T(e)}}const o=/^([a-z][a-z0-9+\-.]*:)?\/\//i;class HttpClient{constructor(dom){if(void 0===dom.window.fetch)throw Error("HttpClient requires a Fetch API implementation, but the current environment doesn't support it. You may need to load a polyfill such as https://github.com/github/fetch");this.dom=dom,this.k=0,this.A=0,this.N=0,this.g="",this.q=null,this.C=[]}D(t){let e;if("object"==typeof t)e={q:t};else{if("function"!=typeof t)throw Error("invalid config");{(e=new HttpClientConfiguration).g=this.g,e.q=Object.assign({},this.q),e.C=this.C;const r=t(e);HttpClientConfiguration.prototype.isPrototypeOf(r)&&(e=r)}}const r=e.q;if(void 0!==r&&Headers.prototype.isPrototypeOf(r.headers))throw Error("Default headers must be a plain object.");const n=e.C;if(void 0!==n&&n.length){if(n.filter(t=>RetryInterceptor.prototype.isPrototypeOf(t)).length>1)throw Error("Only one RetryInterceptor is allowed.");const t=n.findIndex(t=>RetryInterceptor.prototype.isPrototypeOf(t));if(t>=0&&t!==n.length-1)throw Error("The retry interceptor must be the last interceptor defined.")}return this.g=e.g,this.q=r,this.C=void 0!==e.C?e.C:[],this.N=1,this}fetch(t,e){this.M();let r=this.U(t,e);return this.B(r,this.C).then(t=>{let e;if(Response.prototype.isPrototypeOf(t))e=Promise.resolve(t);else{if(!Request.prototype.isPrototypeOf(t))throw Error(`An invalid result was returned by the interceptor chain. Expected a Request or Response instance, but got [${t}]`);r=t,e=fetch(r)}return this.F(e,this.C,r)}).then(t=>Request.prototype.isPrototypeOf(t)?this.fetch(t):t).then(t=>(this.J(),t),t=>{throw this.J(),t})}U(t,e){const r=null!==this.q?this.q:{};let n,s,i;const u=(function(t){const e={},r=void 0!==t?t:{};for(const name in r)r.hasOwnProperty(name)&&(e[name]="function"==typeof r[name]?r[name]():r[name]);return e})(r.headers);if(Request.prototype.isPrototypeOf(t))n=t,i=new Headers(n.headers).get("Content-Type");else{e||(e={});const u=Object.assign({},r,{headers:{}},e,void 0!==(s=e.body)?{body:s}:null);i=new Headers(u.headers).get("Content-Type"),n=new Request((c=this.g,o.test(h=t)?h:(void 0!==c?c:"")+h),u)}var c,h;return i||(new Headers(u).has("content-type")?n.headers.set("Content-Type",new Headers(u).get("content-type")):void 0!==s&&(function(t){try{JSON.parse(t)}catch(t){return 0}return 1})(s)&&n.headers.set("Content-Type","application/json")),(function(t){const e=void 0!==u?u:{};for(const name in e)e.hasOwnProperty(name)&&!t.has(name)&&t.set(name,e[name])})(n.headers),void 0!==s&&Blob.prototype.isPrototypeOf(s)&&s.type&&n.headers.set("Content-Type",s.type),n}get(t,e){return this.fetch(t,e)}_(t,e,r){return this.L(t,e,r,"POST")}put(t,e,r){return this.L(t,e,r,"PUT")}Y(t,e,r){return this.L(t,e,r,"PATCH")}delete(t,e,r){return this.L(t,e,r,"DELETE")}M(){if(this.A=!!++this.k,this.A){const t=runtime.DOM.$("aurelia-fetch-client-request-started",{bubbles:1,cancelable:1});kernel.PLATFORM.setTimeout(()=>{runtime.DOM.dispatchEvent(t)},1)}}J(){if(this.A=!!--this.k,!this.A){const t=runtime.DOM.$("aurelia-fetch-client-requests-drained",{bubbles:1,cancelable:1});kernel.PLATFORM.setTimeout(()=>{runtime.DOM.dispatchEvent(t)},1)}}B(t,e){return this.G(t,e,"request","requestError",this)}F(t,e,r){return this.G(t,e,"response","responseError",r,this)}G(t,e,s,i,...o){return(void 0!==e?e:[]).reduce((t,e)=>{const u=e[s],c=e[i];return t.then(u?value=>u.call(e,value,...o):r,c?t=>c.call(e,t,...o):n)},Promise.resolve(t))}L(t,e,r,n){return r||(r={}),r.method=n,e&&(r.body=e),this.fetch(t,r)}}HttpClient.inject=[runtime.IDOM],t.HttpClient=HttpClient,t.HttpClientConfiguration=HttpClientConfiguration,t.RetryInterceptor=RetryInterceptor,t.json=function(t,e){return JSON.stringify(void 0!==t?t:{},e)},t.retryStrategy=retryStrategy,Object.defineProperty(t,"K",{value:1})});
