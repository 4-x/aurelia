System.register("fetchClient",["@aurelia/kernel","@aurelia/runtime"],function(t){"use strict";var PLATFORM,DOM,IDOM;return{t:[function(t){PLATFORM=t.PLATFORM},function(t){DOM=t.DOM,IDOM=t.IDOM}],s(){function e(t){if(!t.ok)throw t;return t}function r(t){return t}function n(t){throw t}t("json",function(t,e){return JSON.stringify(void 0!==t?t:{},e)});const retryStrategy=t("retryStrategy",{fixed:0,incremental:1,i:2,random:3}),s={o:3,interval:1e3,strategy:retryStrategy.fixed};class RetryInterceptor{constructor(t){if(this.u=Object.assign({},s,void 0!==t?t:{}),this.u.strategy===retryStrategy.i&&1e3>=this.u.interval)throw Error("An interval less than or equal to 1 second is not allowed when using the exponential retry strategy")}h(t){return t.u||(t.u=Object.assign({},this.u),t.u.l=0),t.u.p=t.clone(),t}response(t,e){return Reflect.deleteProperty(e,"retryConfig"),t}v(t,e,r){const{u:n}=e,{p:s}=n;return Promise.resolve().then(()=>{if(n.o>n.l){const o=void 0!==n.m?n.m(t,e):1;return Promise.resolve(o).then(o=>{if(o){n.l++;const t=(function(t){const{interval:e,strategy,R:r,g:n,l:s}=t;if("function"==typeof strategy)return t.strategy(s);switch(strategy){case retryStrategy.fixed:return i[retryStrategy.fixed](e);case retryStrategy.incremental:return i[retryStrategy.incremental](s,e);case retryStrategy.i:return i[retryStrategy.i](s,e);case retryStrategy.random:return i[retryStrategy.random](s,e,r,n);default:throw Error("Unrecognized retry strategy")}})(n);return new Promise(e=>PLATFORM.global.setTimeout(e,isNaN(t)?0:t)).then(()=>{const t=s.clone();return"function"==typeof n.C?n.C(t,r):t}).then(t=>{const e=Object.assign({},t,{u:n});return r.fetch(e)})}throw Reflect.deleteProperty(e,"retryConfig"),t})}throw Reflect.deleteProperty(e,"retryConfig"),t})}}t("RetryInterceptor",RetryInterceptor);const i=[t=>t,(t,e)=>e*t,(t,e)=>1===t?e:Math.pow(e,t)/1e3,(t,e,r=0,n=6e4)=>Math.random()*(n-r)+r];class HttpClientConfiguration{constructor(){this.q="",this.j={},this.O=[]}T(t){return this.q=t,this}H(t){return this.j=t,this}P(t){return this.O.push(t),this}I(){return Object.assign(this.j,{S:"same-origin"},this.j),this.A()}A(){return this.P({response:e})}N(t){const e=new RetryInterceptor(t);return this.P(e)}}t("HttpClientConfiguration",HttpClientConfiguration);const o=/^([a-z][a-z0-9+\-.]*:)?\/\//i;class HttpClient{constructor(dom){if(void 0===dom.window.fetch)throw Error("HttpClient requires a Fetch API implementation, but the current environment doesn't support it. You may need to load a polyfill such as https://github.com/github/fetch");this.dom=dom,this.k=0,this.D=0,this.U=0,this.q="",this.j=null,this.O=[]}B(t){let e;if("object"==typeof t)e={j:t};else{if("function"!=typeof t)throw Error("invalid config");{(e=new HttpClientConfiguration).q=this.q,e.j=Object.assign({},this.j),e.O=this.O;const r=t(e);HttpClientConfiguration.prototype.isPrototypeOf(r)&&(e=r)}}const r=e.j;if(void 0!==r&&Headers.prototype.isPrototypeOf(r.headers))throw Error("Default headers must be a plain object.");const n=e.O;if(void 0!==n&&n.length){if(n.filter(t=>RetryInterceptor.prototype.isPrototypeOf(t)).length>1)throw Error("Only one RetryInterceptor is allowed.");const t=n.findIndex(t=>RetryInterceptor.prototype.isPrototypeOf(t));if(t>=0&&t!==n.length-1)throw Error("The retry interceptor must be the last interceptor defined.")}return this.q=e.q,this.j=r,this.O=void 0!==e.O?e.O:[],this.U=1,this}fetch(t,e){this.F();let r=this.J(t,e);return this.M(r,this.O).then(t=>{let e;if(Response.prototype.isPrototypeOf(t))e=Promise.resolve(t);else{if(!Request.prototype.isPrototypeOf(t))throw Error(`An invalid result was returned by the interceptor chain. Expected a Request or Response instance, but got [${t}]`);r=t,e=fetch(r)}return this.L(e,this.O,r)}).then(t=>Request.prototype.isPrototypeOf(t)?this.fetch(t):t).then(t=>(this.Y(),t),t=>{throw this.Y(),t})}J(t,e){const r=null!==this.j?this.j:{};let n,s,i;const c=(function(t){const e={},r=void 0!==t?t:{};for(const name in r)r.hasOwnProperty(name)&&(e[name]="function"==typeof r[name]?r[name]():r[name]);return e})(r.headers);if(Request.prototype.isPrototypeOf(t))n=t,i=new Headers(n.headers).get("Content-Type");else{e||(e={});const c=Object.assign({},r,{headers:{}},e,void 0!==(s=e.body)?{body:s}:null);i=new Headers(c.headers).get("Content-Type"),n=new Request((u=this.q,o.test(h=t)?h:(void 0!==u?u:"")+h),c)}var u,h;return i||(new Headers(c).has("content-type")?n.headers.set("Content-Type",new Headers(c).get("content-type")):void 0!==s&&(function(t){try{JSON.parse(t)}catch(t){return 0}return 1})(s)&&n.headers.set("Content-Type","application/json")),(function(t){const e=void 0!==c?c:{};for(const name in e)e.hasOwnProperty(name)&&!t.has(name)&&t.set(name,e[name])})(n.headers),void 0!==s&&Blob.prototype.isPrototypeOf(s)&&s.type&&n.headers.set("Content-Type",s.type),n}get(t,e){return this.fetch(t,e)}$(t,e,r){return this.G(t,e,r,"POST")}put(t,e,r){return this.G(t,e,r,"PUT")}K(t,e,r){return this.G(t,e,r,"PATCH")}delete(t,e,r){return this.G(t,e,r,"DELETE")}F(){if(this.D=!!++this.k,this.D){const t=DOM.V("aurelia-fetch-client-request-started",{bubbles:1,cancelable:1});PLATFORM.setTimeout(()=>{DOM.dispatchEvent(t)},1)}}Y(){if(this.D=!!--this.k,!this.D){const t=DOM.V("aurelia-fetch-client-requests-drained",{bubbles:1,cancelable:1});PLATFORM.setTimeout(()=>{DOM.dispatchEvent(t)},1)}}M(t,e){return this.W(t,e,"request","requestError",this)}L(t,e,r){return this.W(t,e,"response","responseError",r,this)}W(t,e,s,i,...o){return(void 0!==e?e:[]).reduce((t,e)=>{const c=e[s],u=e[i];return t.then(c?value=>c.call(e,value,...o):r,u?t=>u.call(e,t,...o):n)},Promise.resolve(t))}G(t,e,r,n){return r||(r={}),r.method=n,e&&(r.body=e),this.fetch(t,r)}}t("HttpClient",HttpClient),HttpClient.inject=[IDOM]}}});
