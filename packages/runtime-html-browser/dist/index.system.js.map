{"version":3,"file":"index.system.js","sources":["../src/index.ts"],"sourcesContent":["import { DI, IContainer, IRegistry, IResolver, Key, Registration } from '@aurelia/kernel';\nimport { IDOM, IDOMInitializer, ISinglePageApp } from '@aurelia/runtime';\nimport { BasicConfiguration as RuntimeHtmlConfiguration, HTMLDOM } from '@aurelia/runtime-html';\n\nclass BrowserDOMInitializer implements IDOMInitializer {\n  public static readonly inject: readonly Key[] = [IContainer];\n\n  private readonly container: IContainer;\n\n  constructor(container: IContainer) {\n    this.container = container;\n  }\n\n  public static register(container: IContainer): IResolver<IDOMInitializer> {\n    return Registration.singleton(IDOMInitializer, this).register(container);\n  }\n\n  public initialize(config?: ISinglePageApp<Node>): IDOM {\n    if (this.container.has(IDOM, false)) {\n      return this.container.get(IDOM);\n    }\n    let dom: IDOM;\n    if (config !== undefined) {\n      if (config.dom !== undefined) {\n        dom = config.dom;\n      } else if (config.host.ownerDocument !== null) {\n        dom = new HTMLDOM(\n          window,\n          config.host.ownerDocument,\n          Node,\n          Element,\n          HTMLElement,\n          CustomEvent\n        );\n      } else {\n        dom = new HTMLDOM(\n          window,\n          document,\n          Node,\n          Element,\n          HTMLElement,\n          CustomEvent\n        );\n      }\n    } else {\n      dom = new HTMLDOM(\n        window,\n        document,\n        Node,\n        Element,\n        HTMLElement,\n        CustomEvent\n      );\n    }\n    Registration.instance(IDOM, dom).register(this.container);\n    return dom;\n  }\n}\n\nexport const IDOMInitializerRegistration = BrowserDOMInitializer as IRegistry;\n\n/**\n * Default HTML-specific, browser-specific implementations for the following interfaces:\n * - `IDOMInitializer`\n */\nexport const DefaultComponents = [\n  IDOMInitializerRegistration\n];\n\n/**\n * A DI configuration object containing html-specific, browser-specific registrations:\n * - `BasicConfiguration` from `@aurelia/runtime-html`\n * - `DefaultComponents`\n */\nexport const BasicConfiguration = {\n  /**\n   * Apply this configuration to the provided container.\n   */\n  register(container: IContainer): IContainer {\n    return RuntimeHtmlConfiguration\n      .register(container)\n      .register(...DefaultComponents);\n  },\n  /**\n   * Create a new container with this configuration applied to it.\n   */\n  createContainer(): IContainer {\n    return this.register(DI.createContainer());\n  }\n};\n"],"names":["RuntimeHtmlConfiguration"],"mappings":";;;;;;;;;;;;;;;;;MAIA,MAAM,qBAAqB;UAKzB,YAAY,SAAqB;cAC/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;WAC5B;UAEM,OAAO,QAAQ,CAAC,SAAqB;cAC1C,OAAO,YAAY,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;WAC1E;UAEM,UAAU,CAAC,MAA6B;cAC7C,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;kBACnC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;eACjC;cACD,IAAI,GAAS,CAAC;cACd,IAAI,MAAM,KAAK,SAAS,EAAE;kBACxB,IAAI,MAAM,CAAC,GAAG,KAAK,SAAS,EAAE;sBAC5B,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;mBAClB;uBAAM,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;sBAC7C,GAAG,GAAG,IAAI,OAAO,CACf,MAAM,EACN,MAAM,CAAC,IAAI,CAAC,aAAa,EACzB,IAAI,EACJ,OAAO,EACP,WAAW,EACX,WAAW,CACZ,CAAC;mBACH;uBAAM;sBACL,GAAG,GAAG,IAAI,OAAO,CACf,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,OAAO,EACP,WAAW,EACX,WAAW,CACZ,CAAC;mBACH;eACF;mBAAM;kBACL,GAAG,GAAG,IAAI,OAAO,CACf,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,OAAO,EACP,WAAW,EACX,WAAW,CACZ,CAAC;eACH;cACD,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;cAC1D,OAAO,GAAG,CAAC;WACZ;;MAnDsB,4BAAM,GAAmB,CAAC,UAAU,CAAC,CAAC;AAsD/D,YAAa,2BAA2B,0CAAG,qBAAkC,EAAC;MAE9E;;;;AAIA,YAAa,iBAAiB,gCAAG;UAC/B,2BAA2B;OAC5B,EAAC;MAEF;;;;;AAKA,YAAa,kBAAkB,iCAAG;;;;UAIhC,QAAQ,CAAC,SAAqB;cAC5B,OAAOA,oBAAwB;mBAC5B,QAAQ,CAAC,SAAS,CAAC;mBACnB,QAAQ,CAAC,GAAG,iBAAiB,CAAC,CAAC;WACnC;;;;UAID,eAAe;cACb,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC;WAC5C;OACF;;;;;;"}