{"version":3,"file":"index.es6.js","sources":["../src/index.ts"],"sourcesContent":["import { DI, IContainer, IRegistry, IResolver, Key, Registration } from '@aurelia/kernel';\nimport { IDOM, IDOMInitializer, ISinglePageApp } from '@aurelia/runtime';\nimport { BasicConfiguration as RuntimeHtmlConfiguration, HTMLDOM } from '@aurelia/runtime-html';\n\nclass BrowserDOMInitializer implements IDOMInitializer {\n  public static readonly inject: readonly Key[] = [IContainer];\n\n  private readonly container: IContainer;\n\n  constructor(container: IContainer) {\n    this.container = container;\n  }\n\n  public static register(container: IContainer): IResolver<IDOMInitializer> {\n    return Registration.singleton(IDOMInitializer, this).register(container);\n  }\n\n  public initialize(config?: ISinglePageApp<Node>): IDOM {\n    if (this.container.has(IDOM, false)) {\n      return this.container.get(IDOM);\n    }\n    let dom: IDOM;\n    if (config !== undefined) {\n      if (config.dom !== undefined) {\n        dom = config.dom;\n      } else if (config.host.ownerDocument !== null) {\n        dom = new HTMLDOM(\n          window,\n          config.host.ownerDocument,\n          Node,\n          Element,\n          HTMLElement,\n          CustomEvent\n        );\n      } else {\n        dom = new HTMLDOM(\n          window,\n          document,\n          Node,\n          Element,\n          HTMLElement,\n          CustomEvent\n        );\n      }\n    } else {\n      dom = new HTMLDOM(\n        window,\n        document,\n        Node,\n        Element,\n        HTMLElement,\n        CustomEvent\n      );\n    }\n    Registration.instance(IDOM, dom).register(this.container);\n    return dom;\n  }\n}\n\nexport const IDOMInitializerRegistration = BrowserDOMInitializer as IRegistry;\n\n/**\n * Default HTML-specific, browser-specific implementations for the following interfaces:\n * - `IDOMInitializer`\n */\nexport const DefaultComponents = [\n  IDOMInitializerRegistration\n];\n\n/**\n * A DI configuration object containing html-specific, browser-specific registrations:\n * - `BasicConfiguration` from `@aurelia/runtime-html`\n * - `DefaultComponents`\n */\nexport const BasicConfiguration = {\n  /**\n   * Apply this configuration to the provided container.\n   */\n  register(container: IContainer): IContainer {\n    return RuntimeHtmlConfiguration\n      .register(container)\n      .register(...DefaultComponents);\n  },\n  /**\n   * Create a new container with this configuration applied to it.\n   */\n  createContainer(): IContainer {\n    return this.register(DI.createContainer());\n  }\n};\n"],"names":["RuntimeHtmlConfiguration"],"mappings":";;;;AAIA,MAAM,qBAAqB;IAKzB,YAAY,SAAqB;QAC/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC5B;IAEM,OAAO,QAAQ,CAAC,SAAqB;QAC1C,OAAO,YAAY,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;KAC1E;IAEM,UAAU,CAAC,MAA6B;QAC7C,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACjC;QACD,IAAI,GAAS,CAAC;QACd,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,IAAI,MAAM,CAAC,GAAG,KAAK,SAAS,EAAE;gBAC5B,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;aAClB;iBAAM,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;gBAC7C,GAAG,GAAG,IAAI,OAAO,CACf,MAAM,EACN,MAAM,CAAC,IAAI,CAAC,aAAa,EACzB,IAAI,EACJ,OAAO,EACP,WAAW,EACX,WAAW,CACZ,CAAC;aACH;iBAAM;gBACL,GAAG,GAAG,IAAI,OAAO,CACf,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,OAAO,EACP,WAAW,EACX,WAAW,CACZ,CAAC;aACH;SACF;aAAM;YACL,GAAG,GAAG,IAAI,OAAO,CACf,MAAM,EACN,QAAQ,EACR,IAAI,EACJ,OAAO,EACP,WAAW,EACX,WAAW,CACZ,CAAC;SACH;QACD,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1D,OAAO,GAAG,CAAC;KACZ;;AAnDsB,4BAAM,GAAmB,CAAC,UAAU,CAAC,CAAC;AAsD/D,MAAa,2BAA2B,GAAG,qBAAkC,CAAC;;;;;AAM9E,MAAa,iBAAiB,GAAG;IAC/B,2BAA2B;CAC5B,CAAC;;;;;;AAOF,MAAa,kBAAkB,GAAG;;;;IAIhC,QAAQ,CAAC,SAAqB;QAC5B,OAAOA,oBAAwB;aAC5B,QAAQ,CAAC,SAAS,CAAC;aACnB,QAAQ,CAAC,GAAG,iBAAiB,CAAC,CAAC;KACnC;;;;IAID,eAAe;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC;KAC5C;CACF;;;;"}